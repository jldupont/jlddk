#!/usr/bin/env python
"""
    jldcomp - compute filename level difference between two directory paths, outputs result on stdout using JSON

    - primary path
    - compare path
    - status filename (file inside the primary path)

    @author: Jean-Lou Dupont
"""
__version__="0.4"
import os, sys, argparse
op=os.path

try:
    import jlddk #@UnusedImport
except:
    ### must be in dev mode then    
    this_dir=op.dirname(__file__)
    lib_path=op.abspath(op.join(this_dir, ".."))
    sys.path.insert(0, lib_path)
    import jlddk #@UnusedImport

########################################################################

DESC="""Compare filename level difference between 2 directory paths - v%s""" % __version__
DEFAULTS={
          "polling_interval": 30
          ,"status_filename": "_status"
          ,"wait_status": False
          }

def main():
    try:
        import jlddk.do_setup #@UnusedImport
        import logging
        import jlddk.do_checks #@UnusedImport
        
        parser=argparse.ArgumentParser(description=DESC, fromfile_prefix_chars='@')
        parser.add_argument('-pp',  dest='primary_path',  type=str, help="Primary path", required=True)
        parser.add_argument('-zp',  dest='compare_path',  type=str, help="Compare path", required=True)
        
        parser.add_argument('-sf',  dest='status_filename',  type=str, help="Filename of status file", default=DEFAULTS["status_filename"])
        parser.add_argument('-wsf', dest='wait_status',    action="store_true", help="Wait on status file", default=DEFAULTS["wait_status"])
        
        parser.add_argument('-exts',  dest='exts',             type=str, nargs="+", help="Extensions to process (optional, default is all)", default=None)
        parser.add_argument('-tp',    dest='topic_name',       type=str, help="Topic name to include in output JSON", default=None)
        
        parser.add_argument('-cp',    dest='check_path',       type=str, help="Check path")
        parser.add_argument('-jbn',   dest='just_basename',    action="store_true", help="Just compare basename", default=False)
        parser.add_argument('-jzppp', dest='just_zppp',        action="store_true", help="Just output 'zp-pp'", default=False)
        parser.add_argument('-jppzp', dest='just_ppzp',        action="store_true", help="Just output 'pp-zp'", default=False)
        parser.add_argument('-jcom',  dest='just_com',         action="store_true", help="Just output common set", default=False)
                
        parser.add_argument('-p',   dest="polling_interval", type=int, action="store", help="Polling interval (seconds)", default=DEFAULTS["polling_interval"])
        
        from jlddk.script_comp import run
        from jlddk.tools_sys import process_command_line
        args=process_command_line(parser)
        run(**args)


    except KeyboardInterrupt:
        logging.info("..Exiting")
        sys.exit(0)##no probs
        
    except Exception,e:
        logging.error(str(e))
        sys.exit(1)
        
sys.exit(main())
